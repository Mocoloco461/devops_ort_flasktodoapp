# Path: .github/workflows/docker-test.yml
name: Docker Test Server CI

on:
  push:
    branches:
      - main

jobs:
  run-docker-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Run Test Server
        run: |
          docker compose -f docker-compose-testserver.yml up -d

      - name: Wait for test completion
        run: |
          echo "Waiting for test to complete..."
          timeout 120 docker logs -f server_test || true

      - name: Check test result
        run: |
          if docker logs server_test 2>&1 | grep -q "Success!"; then
            echo "✅ Test PASSED"
            exit 0
          else
            echo "❌ Test FAILED"
            exit 1
          fi

      - name: Login to Docker Hub
        if: success()
        uses: docker/login-action@v3
        with:
          username: moshe2003
          password: dckr_pat_b5gUPWoz7ZpuynsZYV8kP3CIBPg

      - name: Get next version number for test
        if: success()
        id: version_test
        run: |
          # Get latest version from Docker Hub
          LATEST_VERSION=$(docker run --rm curlimages/curl -s "https://registry.hub.docker.com/v2/repositories/moshe2003/server_test/tags/?page_size=100" | grep -o '"name":"[0-9]*"' | grep -o '[0-9]*' | sort -n | tail -1)
          
          # If no versions exist, start with 1
          if [ -z "$LATEST_VERSION" ]; then
            NEXT_VERSION=1
          else
            NEXT_VERSION=$((LATEST_VERSION + 1))
          fi
          
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION"

      - name: Get next version number for appb
        if: success()
        id: version_app
        run: |
          # Get latest version from Docker Hub
          LATEST_VERSION=$(docker run --rm curlimages/curl -s "https://registry.hub.docker.com/v2/repositories/moshe2003/flask_mysql/tags/?page_size=100" | grep -o '"name":"[0-9]*"' | grep -o '[0-9]*' | sort -n | tail -1)
          
          # If no versions exist, start with 1
          if [ -z "$LATEST_VERSION" ]; then
            NEXT_VERSION=1
          else
            NEXT_VERSION=$((LATEST_VERSION + 1))
          fi
          
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION"

      - name: Build and push server_test image
        if: success()
        run: |
          VERSION=${{ steps.version_test.outputs.version }}
          echo "Building version: $VERSION"
          
          # Build with version tag
          docker build -t moshe2003/server_test:$VERSION ./servertest
          docker push moshe2003/server_test:$VERSION
          
          # Also tag as latest
          docker tag moshe2003/server_test:$VERSION moshe2003/server_test:latest
          docker push moshe2003/server_test:latest
          
          echo "✅ Image pushed to Docker Hub successfully!"
          echo "Version: $VERSION"
          echo "Latest: latest"

      - name: Build and push flask_app image
        if: success()
        run: |
          VERSION=${{ steps.version_app.outputs.version }}
          echo "Building version: $VERSION"
          
          # Build with version tag
          docker build -t moshe2003/flask_app:$VERSION .
          docker push moshe2003/flask_app:$VERSION
          
          # Also tag as latest
          docker tag moshe2003/flask_app:$VERSION moshe2003/flask_app:latest
          docker push moshe2003/flask_app:latest

          
          echo "✅ Image pushed to Docker Hub successfully!"
          echo "Version: $VERSION"
          echo "Latest: latest"

